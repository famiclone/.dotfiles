#!/usr/bin/env python3

import curses
import subprocess
import re
import time


def save_state():
    pass


class MPCClient:
    pass

    def exec(self, cmd):
        return subprocess.check_output(cmd.split()).decode("utf-8")

    def get_current_song(self):
        return self.exec("mpc current")

    def get_current_status(self):
        result = self.exec("mpc status")
        match = re.search(r"\[playing\]|\[paused\]", result)
        if match:
            return match.group()[1:-1]
        else:
            return None

    def get_current_playlist(self):
        return self.exec("mpc playlist").split("\n")

    def set_next_song(self):
        self.exec("mpc -q next")
        return self.get_current_song()

    def set_prev_song(self):
        self.exec("mpc -q prev")
        return self.get_current_song()

    def get_track_progress(self, index):  # 0 - current, 1 - duration
        result = self.exec("mpc status")

        match = re.search(r"\d+:\d+/\d+:\d+", result)
        if match:
            duration = match.group().split("/")[1]
            return duration
        else:
            return 0


client = MPCClient()

state = {
    "current_song": {
        "name": client.get_current_song(),
    },
    "current_playlist_index": 0,
    "current_status": None
}


def render_list(stdscr, items):
    for i, item in enumerate(items):
        stdscr.addstr(i + 2, 0, item)


def render_status_bar(stdscr, y, width):
    stdscr.addstr(y, 0, str(state["current_song"]["name"]))
    stdscr.addstr(y, width - 5, str(client.get_track_progress(0)))

    for x in range(width):
        stdscr.addch(y + 2, x, curses.ACS_HLINE, curses.color_pair(1))


def main(stdscr):
    stdscr.clear()

    while True:
        curses.start_color()
        curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
        height, width = stdscr.getmaxyx()

        render_list(stdscr, client.get_current_playlist())

        render_status_bar(stdscr, 1, width)


        key = stdscr.getch()

        if key == 113:
            # Quit
            save_state()
            break
        if key == 49:  # 1
            pass
        if key == 50:  # 2
            pass
        if key == 51:  # 3
            pass
        if key == 112:  # p
            if (client.get_current_status() == "playing"):
                client.exec("mpc pause")
            else:
                client.exec("mpc play")
        if key == 60:  # <
            state["current_song"]["name"] = client.set_prev_song()
        if key == 62:  # >
            state["current_song"]["name"] = client.set_next_song()

        stdscr.refresh()


curses.wrapper(main)
