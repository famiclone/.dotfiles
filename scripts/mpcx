#!/usr/bin/env python3

import curses
import subprocess
import re
import time
import socket


def text_to_dict(text):
    lines = text.strip().split("\n") 
    result_dict = {} 

    for line in lines:
        try:
            key, value = line.split(": ", 1) 
            result_dict[key] = value
        except ValueError:
            pass

    return result_dict


def save_state():
    pass

class MPDClient:
    def __init__(self, port = 6600):
        self.client = self.connect("localhost", port)

    def connect(self, host, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
        s.recv(1024)  # Welcome mpd message
        return s

    def close(self):
        self.client.close()

    def send(self, cmd):
        self.client.sendall((cmd + "\n").encode("utf-8"))
        return self.client.recv(4096).decode("utf-8")

    def get_current_song(self):
        return text_to_dict(self.send("currentsong"))

class MPCClient:
    pass

    def exec(self, cmd):
        return subprocess.check_output(cmd.split()).decode("utf-8")

    def get_current_song(self):
        return self.exec("mpc current")

    def get_current_status(self):
        result = self.exec("mpc status")
        match = re.search(r"\[playing\]|\[paused\]", result)
        if match:
            return match.group()[1:-1]
        else:
            return None

    def get_current_playlist(self):
        return self.exec("mpc playlist").split("\n")

    def set_next_song(self):
        self.exec("mpc -q next")
        return self.get_current_song()

    def set_prev_song(self):
        self.exec("mpc -q prev")
        return self.get_current_song()

    def get_track_progress(self, index):  # 0 - current, 1 - duration
        result = self.exec("mpc status")

        match = re.search(r"\d+:\d+/\d+:\d+", result)
        if match:
            duration = match.group().split("/")[1]
            return duration
        else:
            return 0


client = MPCClient()
mpd = MPDClient(6602)

state = {
    "current_song": {
        "name": client.get_current_song()
    },
    "current_playlist_index": 0,
    "current_status": None,
    "current_element": 0
}


def render_list(stdscr, items):
    for i, item in enumerate(items):
        if i == state["current_element"]:
            pass
            stdscr.addstr(i, 0, item, curses.A_REVERSE)
        else:
            stdscr.addstr(i, 0, item)


def render_status_bar(stdscr, y, width):
    for x in range(width):
        stdscr.addch(y, x, curses.ACS_HLINE, curses.color_pair(1))
    stdscr.addstr(y + 1, 0, str(state["current_song"]["name"]))
    stdscr.addstr(y + 1, width - 5, str(client.get_track_progress(0)))



def main(stdscr):
    curses.curs_set(0)
    stdscr.clear()

    while True:
        curses.start_color()
        curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
        height, width = stdscr.getmaxyx()

        render_list(stdscr, client.get_current_playlist())

        render_status_bar(stdscr, height - 5, width)


        key = stdscr.getch()

        if key == 113:
            # Quit
            save_state()
            break
        if key == 49:  # 1
            pass
        if key == 50:  # 2
            pass
        if key == 51:  # 3
            pass
        # j
        if key == 106 and state["current_element"] < len(client.get_current_playlist()) - 1:
            state["current_element"] += 1
        # k
        if key == 107 and state["current_element"] > 0:
            state["current_element"] -= 1
        # G
        if key == 71:
            state["current_element"] = len(client.get_current_playlist()) - 2
        # return
        if key == 10:
            client.exec("mpc play " + str(state["current_element"] + 1))
            state["current_song"]["name"] = client.get_current_song()
            stdscr.refresh()

        if key == 112:  # p
            if (client.get_current_status() == "playing"):
                client.exec("mpc pause")
            else:
                client.exec("mpc play")
        if key == 60:  # <
            state["current_song"]["name"] = client.set_prev_song()
        if key == 62:  # >
            state["current_song"]["name"] = client.set_next_song()

        stdscr.refresh()


curses.wrapper(main)
